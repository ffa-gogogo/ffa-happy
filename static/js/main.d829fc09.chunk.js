(this["webpackJsonpffa-happy"]=this["webpackJsonpffa-happy"]||[]).push([[0],{108:function(n,r,e){"use strict";e.r(r),e(63),e(0);r=e(46);var t=e(39),i=e(110),o=e(8),a=e(7);function s(){return Object(a.jsx)("div",{className:"index-page",children:Object(a.jsx)("h1",{children:"12312312"})})}var c='<!DOCTYPE html>\r\n<html lang="en">\r\n\r\n<head>\r\n  <meta charset="UTF-8">\r\n\r\n  <title>Musical Christmas Lights</title>\r\n\r\n  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">\r\n\r\n  <style>\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n      margin: 0;\r\n      height: 100vh;\r\n      overflow: hidden;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      background: #161616;\r\n      color: #c5a880;\r\n      font-family: sans-serif;\r\n    }\r\n\r\n    label {\r\n      display: inline-block;\r\n      background-color: #161616;\r\n      padding: 16px;\r\n      border-radius: 0.3rem;\r\n      cursor: pointer;\r\n      margin-top: 1rem;\r\n      width: 300px;\r\n      border-radius: 10px;\r\n      border: 1px solid #c5a880;\r\n      text-align: center;\r\n    }\r\n\r\n    ul {\r\n      list-style-type: none;\r\n      padding: 0;\r\n      margin: 0;\r\n    }\r\n\r\n    .btn {\r\n      background-color: #161616;\r\n      border-radius: 10px;\r\n      color: #c5a880;\r\n      border: 1px solid #c5a880;\r\n      padding: 16px;\r\n      width: 300px;\r\n      margin-bottom: 16px;\r\n      line-height: 1.5;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .separator {\r\n      font-weight: bold;\r\n      text-align: center;\r\n      width: 300px;\r\n      margin: 16px 0px;\r\n      color: #a07676;\r\n    }\r\n\r\n    .title {\r\n      color: #a07676;\r\n      font-weight: bold;\r\n      font-size: 1.25rem;\r\n      margin-bottom: 16px;\r\n    }\r\n\r\n    .text-loading {\r\n      font-size: 2rem;\r\n    }\r\n  </style>\r\n\r\n  <script>\r\n    window.console = window.console || function (t) { };\r\n  <\/script>\r\n\r\n\r\n\r\n  <script>\r\n    if (document.location.search.match(/type=embed/gi)) {\r\n      window.parent.postMessage("resize", "*");\r\n    }\r\n  <\/script>\r\n\r\n\r\n</head>\r\n\r\n<body translate="no">\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/build/three.min.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/EffectComposer.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/RenderPass.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/ShaderPass.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/shaders/CopyShader.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/shaders/LuminosityHighPassShader.js"><\/script>\r\n  <script src="https://cdn.jsdelivr.net/npm/three@0.115.0/examples/js/postprocessing/UnrealBloomPass.js"><\/script>\r\n\r\n  <div id="overlay">\r\n    <ul>\r\n      <li class="title">\u8bf7\u9009\u62e9\u97f3\u4e50</li>\r\n      <li>\r\n        <button class="btn" id="btnA" type="button">\r\n          Snowflakes Falling Down by Simon Panrucker\r\n        </button>\r\n      </li>\r\n      <li><button class="btn" id="btnB" type="button">This Christmas by Dott</button></li>\r\n      <li><button class="btn" id="btnC" type="button">No room at the inn by TRG Banks</button></li>\r\n      <li><button class="btn" id="btnD" type="button">Jingle Bell Swing by Mark Smeby</button></li>\r\n      <li class="separator">\u6216\u8005</li>\r\n      <li>\r\n        <input type="file" id="upload" hidden />\r\n        <label for="upload">Upload File</label>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n\r\n  <script id="rendered-js">\r\n    const { PI, sin, cos } = Math;\r\n    const TAU = 2 * PI;\r\n\r\n    const map = (value, sMin, sMax, dMin, dMax) => {\r\n      return dMin + (value - sMin) / (sMax - sMin) * (dMax - dMin);\r\n    };\r\n\r\n    const range = (n, m = 0) =>\r\n      Array(n).\r\n        fill(m).\r\n        map((i, j) => i + j);\r\n\r\n    const rand = (max, min = 0) => min + Math.random() * (max - min);\r\n    const randInt = (max, min = 0) => Math.floor(min + Math.random() * (max - min));\r\n    const randChoise = arr => arr[randInt(arr.length)];\r\n    const polar = (ang, r = 1) => [r * cos(ang), r * sin(ang)];\r\n\r\n    let scene, camera, renderer, analyser;\r\n    let step = 0;\r\n    const uniforms = {\r\n      time: { type: "f", value: 0.0 },\r\n      step: { type: "f", value: 0.0 }\r\n    };\r\n\r\n    const params = {\r\n      exposure: 1,\r\n      bloomStrength: 0.9,\r\n      bloomThreshold: 0,\r\n      bloomRadius: 0.5\r\n    };\r\n\r\n    let composer;\r\n\r\n    const fftSize = 2048;\r\n    const totalPoints = 4000;\r\n\r\n    const listener = new THREE.AudioListener();\r\n\r\n    const audio = new THREE.Audio(listener);\r\n\r\n    document.querySelector("input").addEventListener("change", uploadAudio, false);\r\n\r\n    const buttons = document.querySelectorAll(".btn");\r\n    buttons.forEach((button, index) =>\r\n      button.addEventListener("click", () => loadAudio(index)));\r\n\r\n\r\n    function init() {\r\n      const overlay = document.getElementById("overlay");\r\n      overlay.remove();\r\n\r\n      scene = new THREE.Scene();\r\n      renderer = new THREE.WebGLRenderer({ antialias: true });\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      document.body.appendChild(renderer.domElement);\r\n\r\n      camera = new THREE.PerspectiveCamera(\r\n        60,\r\n        window.innerWidth / window.innerHeight,\r\n        1,\r\n        1000);\r\n\r\n      camera.position.set(-0.09397456774197047, -2.5597086635726947, 24.420789670889008);\r\n      camera.rotation.set(0.10443543723052419, -0.003827152981119352, 0.0004011488708739715);\r\n\r\n      const format = renderer.capabilities.isWebGL2 ?\r\n        THREE.RedFormat :\r\n        THREE.LuminanceFormat;\r\n\r\n      uniforms.tAudioData = {\r\n        value: new THREE.DataTexture(analyser.data, fftSize / 2, 1, format)\r\n      };\r\n\r\n\r\n      addPlane(scene, uniforms, 3000);\r\n      addSnow(scene, uniforms);\r\n\r\n      range(10).map(i => {\r\n        addTree(scene, uniforms, totalPoints, [20, 0, -20 * i]);\r\n        addTree(scene, uniforms, totalPoints, [-20, 0, -20 * i]);\r\n      });\r\n\r\n      const renderScene = new THREE.RenderPass(scene, camera);\r\n\r\n      const bloomPass = new THREE.UnrealBloomPass(\r\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n        1.5,\r\n        0.4,\r\n        0.85);\r\n\r\n      bloomPass.threshold = params.bloomThreshold;\r\n      bloomPass.strength = params.bloomStrength;\r\n      bloomPass.radius = params.bloomRadius;\r\n\r\n      composer = new THREE.EffectComposer(renderer);\r\n      composer.addPass(renderScene);\r\n      composer.addPass(bloomPass);\r\n\r\n      addListners(camera, renderer, composer);\r\n      animate();\r\n    }\r\n\r\n    function animate(time) {\r\n      analyser.getFrequencyData();\r\n      uniforms.tAudioData.value.needsUpdate = true;\r\n      step = (step + 1) % 1000;\r\n      uniforms.time.value = time;\r\n      uniforms.step.value = step;\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    }\r\n\r\n    function loadAudio(i) {\r\n      document.getElementById("overlay").innerHTML =\r\n        \'<div class="text-loading">\u6b63\u5728\u4e0b\u8f7d\u97f3\u4e50\uff0c\u8bf7\u7a0d\u7b49...</div>\';\r\n      const files = [\r\n        "https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Simon_Panrucker/Happy_Christmas_You_Guys/Simon_Panrucker_-_01_-_Snowflakes_Falling_Down.mp3",\r\n        "https://files.freemusicarchive.org/storage-freemusicarchive-org/music/no_curator/Dott/This_Christmas/Dott_-_01_-_This_Christmas.mp3",\r\n        "https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/TRG_Banks/TRG_Banks_Christmas_Album/TRG_Banks_-_12_-_No_room_at_the_inn.mp3",\r\n        "https://files.freemusicarchive.org/storage-freemusicarchive-org/music/ccCommunity/Mark_Smeby/En_attendant_Nol/Mark_Smeby_-_07_-_Jingle_Bell_Swing.mp3"];\r\n\r\n      const file = files[i];\r\n\r\n      const loader = new THREE.AudioLoader();\r\n      loader.load(file, function (buffer) {\r\n        audio.setBuffer(buffer);\r\n        audio.play();\r\n        analyser = new THREE.AudioAnalyser(audio, fftSize);\r\n        init();\r\n      });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    function uploadAudio(event) {\r\n      document.getElementById("overlay").innerHTML =\r\n        \'<div class="text-loading">\u8bf7\u7a0d\u7b49...</div>\';\r\n      const files = event.target.files;\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = function (file) {\r\n        var arrayBuffer = file.target.result;\r\n\r\n        listener.context.decodeAudioData(arrayBuffer, function (audioBuffer) {\r\n          audio.setBuffer(audioBuffer);\r\n          audio.play();\r\n          analyser = new THREE.AudioAnalyser(audio, fftSize);\r\n          init();\r\n        });\r\n      };\r\n\r\n      reader.readAsArrayBuffer(files[0]);\r\n    }\r\n\r\n    function addTree(scene, uniforms, totalPoints, treePosition) {\r\n      const vertexShader = `\r\n      attribute float mIndex;\r\n      varying vec3 vColor;\r\n      varying float opacity;\r\n      uniform sampler2D tAudioData;\r\n\r\n      float norm(float value, float min, float max ){\r\n       return (value - min) / (max - min);\r\n      }\r\n      float lerp(float norm, float min, float max){\r\n       return (max - min) * norm + min;\r\n      }\r\n\r\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\r\n       return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\r\n      }\r\n\r\n\r\n      void main() {\r\n       vColor = color;\r\n       vec3 p = position;\r\n       vec4 mvPosition = modelViewMatrix * vec4( p, 1.0 );\r\n       float amplitude = texture2D( tAudioData, vec2( mIndex, 0.1 ) ).r;\r\n       float amplitudeClamped = clamp(amplitude-0.4,0.0, 0.6 );\r\n       float sizeMapped = map(amplitudeClamped, 0.0, 0.6, 1.0, 20.0);\r\n       opacity = map(mvPosition.z , -200.0, 15.0, 0.0, 1.0);\r\n       gl_PointSize = sizeMapped * ( 100.0 / -mvPosition.z );\r\n       gl_Position = projectionMatrix * mvPosition;\r\n      }\r\n      `;\r\n      const fragmentShader = `\r\n      varying vec3 vColor;\r\n      varying float opacity;\r\n      uniform sampler2D pointTexture;\r\n      void main() {\r\n       gl_FragColor = vec4( vColor, opacity );\r\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord ); \r\n      }\r\n      `;\r\n      const shaderMaterial = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n          ...uniforms,\r\n          pointTexture: {\r\n            value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`)\r\n          }\r\n        },\r\n\r\n\r\n        vertexShader,\r\n        fragmentShader,\r\n        blending: THREE.AdditiveBlending,\r\n        depthTest: false,\r\n        transparent: true,\r\n        vertexColors: true\r\n      });\r\n\r\n\r\n      const geometry = new THREE.BufferGeometry();\r\n      const positions = [];\r\n      const colors = [];\r\n      const sizes = [];\r\n      const phases = [];\r\n      const mIndexs = [];\r\n\r\n      const color = new THREE.Color();\r\n\r\n      for (let i = 0; i < totalPoints; i++) {\r\n        const t = Math.random();\r\n        const y = map(t, 0, 1, -8, 10);\r\n        const ang = map(t, 0, 1, 0, 6 * TAU) + TAU / 2 * (i % 2);\r\n        const [z, x] = polar(ang, map(t, 0, 1, 5, 0));\r\n\r\n        const modifier = map(t, 0, 1, 1, 0);\r\n        positions.push(x + rand(-0.3 * modifier, 0.3 * modifier));\r\n        positions.push(y + rand(-0.3 * modifier, 0.3 * modifier));\r\n        positions.push(z + rand(-0.3 * modifier, 0.3 * modifier));\r\n\r\n        color.setHSL(map(i, 0, totalPoints, 1.0, 0.0), 1.0, 0.5);\r\n\r\n        colors.push(color.r, color.g, color.b);\r\n        phases.push(rand(1000));\r\n        sizes.push(1);\r\n        const mIndex = map(i, 0, totalPoints, 1.0, 0.0);\r\n        mIndexs.push(mIndex);\r\n      }\r\n\r\n      geometry.setAttribute(\r\n        "position",\r\n        new THREE.Float32BufferAttribute(positions, 3).setUsage(\r\n          THREE.DynamicDrawUsage));\r\n\r\n\r\n      geometry.setAttribute("color", new THREE.Float32BufferAttribute(colors, 3));\r\n      geometry.setAttribute("size", new THREE.Float32BufferAttribute(sizes, 1));\r\n      geometry.setAttribute("phase", new THREE.Float32BufferAttribute(phases, 1));\r\n      geometry.setAttribute("mIndex", new THREE.Float32BufferAttribute(mIndexs, 1));\r\n\r\n      const tree = new THREE.Points(geometry, shaderMaterial);\r\n\r\n      const [px, py, pz] = treePosition;\r\n\r\n      tree.position.x = px;\r\n      tree.position.y = py;\r\n      tree.position.z = pz;\r\n\r\n      scene.add(tree);\r\n    }\r\n\r\n    function addSnow(scene, uniforms) {\r\n      const vertexShader = `\r\n      attribute float size;\r\n      attribute float phase;\r\n      attribute float phaseSecondary;\r\n\r\n      varying vec3 vColor;\r\n      varying float opacity;\r\n\r\n\r\n      uniform float time;\r\n      uniform float step;\r\n\r\n      float norm(float value, float min, float max ){\r\n       return (value - min) / (max - min);\r\n      }\r\n      float lerp(float norm, float min, float max){\r\n       return (max - min) * norm + min;\r\n      }\r\n\r\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\r\n       return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\r\n      }\r\n      void main() {\r\n       float t = time* 0.0006;\r\n\r\n       vColor = color;\r\n\r\n       vec3 p = position;\r\n\r\n       p.y = map(mod(phase+step, 1000.0), 0.0, 1000.0, 25.0, -8.0);\r\n\r\n       p.x += sin(t+phase);\r\n       p.z += sin(t+phaseSecondary);\r\n\r\n       opacity = map(p.z, -150.0, 15.0, 0.0, 1.0);\r\n\r\n       vec4 mvPosition = modelViewMatrix * vec4( p, 1.0 );\r\n\r\n       gl_PointSize = size * ( 100.0 / -mvPosition.z );\r\n\r\n       gl_Position = projectionMatrix * mvPosition;\r\n\r\n      }\r\n      `;\r\n\r\n      const fragmentShader = `\r\n      uniform sampler2D pointTexture;\r\n      varying vec3 vColor;\r\n      varying float opacity;\r\n\r\n      void main() {\r\n       gl_FragColor = vec4( vColor, opacity );\r\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord ); \r\n      }\r\n      `;\r\n      function createSnowSet(sprite) {\r\n        const totalPoints = 300;\r\n        const shaderMaterial = new THREE.ShaderMaterial({\r\n          uniforms: {\r\n            ...uniforms,\r\n            pointTexture: {\r\n              value: new THREE.TextureLoader().load(sprite)\r\n            }\r\n          },\r\n\r\n\r\n          vertexShader,\r\n          fragmentShader,\r\n          blending: THREE.AdditiveBlending,\r\n          depthTest: false,\r\n          transparent: true,\r\n          vertexColors: true\r\n        });\r\n\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        const positions = [];\r\n        const colors = [];\r\n        const sizes = [];\r\n        const phases = [];\r\n        const phaseSecondaries = [];\r\n\r\n        const color = new THREE.Color();\r\n\r\n        for (let i = 0; i < totalPoints; i++) {\r\n          const [x, y, z] = [rand(25, -25), 0, rand(15, -150)];\r\n          positions.push(x);\r\n          positions.push(y);\r\n          positions.push(z);\r\n\r\n          color.set(randChoise(["#f1d4d4", "#f1f6f9", "#eeeeee", "#f1f1e8"]));\r\n\r\n          colors.push(color.r, color.g, color.b);\r\n          phases.push(rand(1000));\r\n          phaseSecondaries.push(rand(1000));\r\n          sizes.push(rand(4, 2));\r\n        }\r\n\r\n        geometry.setAttribute(\r\n          "position",\r\n          new THREE.Float32BufferAttribute(positions, 3));\r\n\r\n        geometry.setAttribute("color", new THREE.Float32BufferAttribute(colors, 3));\r\n        geometry.setAttribute("size", new THREE.Float32BufferAttribute(sizes, 1));\r\n        geometry.setAttribute("phase", new THREE.Float32BufferAttribute(phases, 1));\r\n        geometry.setAttribute(\r\n          "phaseSecondary",\r\n          new THREE.Float32BufferAttribute(phaseSecondaries, 1));\r\n\r\n\r\n        const mesh = new THREE.Points(geometry, shaderMaterial);\r\n\r\n        scene.add(mesh);\r\n      }\r\n      const sprites = [\r\n        "https://assets.codepen.io/3685267/snowflake1.png",\r\n        "https://assets.codepen.io/3685267/snowflake2.png",\r\n        "https://assets.codepen.io/3685267/snowflake3.png",\r\n        "https://assets.codepen.io/3685267/snowflake4.png",\r\n        "https://assets.codepen.io/3685267/snowflake5.png"];\r\n\r\n      sprites.forEach(sprite => {\r\n        createSnowSet(sprite);\r\n      });\r\n    }\r\n\r\n    function addPlane(scene, uniforms, totalPoints) {\r\n      const vertexShader = `\r\n      attribute float size;\r\n      attribute vec3 customColor;\r\n      varying vec3 vColor;\r\n\r\n      void main() {\r\n       vColor = customColor;\r\n       vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n       gl_PointSize = size * ( 300.0 / -mvPosition.z );\r\n       gl_Position = projectionMatrix * mvPosition;\r\n\r\n      }\r\n      `;\r\n      const fragmentShader = `\r\n      uniform vec3 color;\r\n      uniform sampler2D pointTexture;\r\n      varying vec3 vColor;\r\n\r\n      void main() {\r\n       gl_FragColor = vec4( vColor, 1.0 );\r\n       gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\r\n\r\n      }\r\n      `;\r\n      const shaderMaterial = new THREE.ShaderMaterial({\r\n        uniforms: {\r\n          ...uniforms,\r\n          pointTexture: {\r\n            value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`)\r\n          }\r\n        },\r\n\r\n\r\n        vertexShader,\r\n        fragmentShader,\r\n        blending: THREE.AdditiveBlending,\r\n        depthTest: false,\r\n        transparent: true,\r\n        vertexColors: true\r\n      });\r\n\r\n\r\n      const geometry = new THREE.BufferGeometry();\r\n      const positions = [];\r\n      const colors = [];\r\n      const sizes = [];\r\n\r\n      const color = new THREE.Color();\r\n\r\n      for (let i = 0; i < totalPoints; i++) {\r\n        const [x, y, z] = [rand(-25, 25), 0, rand(-150, 15)];\r\n        positions.push(x);\r\n        positions.push(y);\r\n        positions.push(z);\r\n\r\n        color.set(randChoise(["#93abd3", "#f2f4c0", "#9ddfd3"]));\r\n\r\n        colors.push(color.r, color.g, color.b);\r\n        sizes.push(1);\r\n      }\r\n\r\n      geometry.setAttribute(\r\n        "position",\r\n        new THREE.Float32BufferAttribute(positions, 3).setUsage(\r\n          THREE.DynamicDrawUsage));\r\n\r\n\r\n      geometry.setAttribute(\r\n        "customColor",\r\n        new THREE.Float32BufferAttribute(colors, 3));\r\n\r\n      geometry.setAttribute("size", new THREE.Float32BufferAttribute(sizes, 1));\r\n\r\n      const plane = new THREE.Points(geometry, shaderMaterial);\r\n\r\n      plane.position.y = -8;\r\n      scene.add(plane);\r\n    }\r\n\r\n    function addListners(camera, renderer, composer) {\r\n      document.addEventListener("keydown", e => {\r\n        const { x, y, z } = camera.position;\r\n        console.log(`camera.position.set(${x},${y},${z})`);\r\n        const { x: a, y: b, z: c } = camera.rotation;\r\n        console.log(`camera.rotation.set(${a},${b},${c})`);\r\n      });\r\n\r\n      window.addEventListener(\r\n        "resize",\r\n        () => {\r\n          const width = window.innerWidth;\r\n          const height = window.innerHeight;\r\n\r\n          camera.aspect = width / height;\r\n          camera.updateProjectionMatrix();\r\n\r\n          renderer.setSize(width, height);\r\n          composer.setSize(width, height);\r\n        },\r\n        false);\r\n\r\n    }\r\n  <\/script>\r\n\r\n</body>\r\n\r\n</html>';function l(){return Object(a.jsx)("div",{className:"index",children:Object(a.jsx)("div",{dangerouslySetInnerHTML:{__html:c}})})}var d='<!DOCTYPE html>\r\n<html lang="en">\r\n\r\n<head>\r\n    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\r\n\r\n    <title>Love2</title>\r\n    <style>\r\n        html,\r\n        body {\r\n            height: 100%;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        canvas {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: black;\r\n        }\r\n\r\n        div {\r\n            width: 20px;\r\n            height: 20px;\r\n            position: absolute;\r\n        }\r\n\r\n        div img {\r\n            width: 20px;\r\n            height: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <canvas id="pinkboard" width="805" height="946">\r\n        Canvas Not Support\r\n    </canvas>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <div><img src="./Heart.png" /></div>\r\n    <script>\r\n        var oDivs = document.querySelectorAll("div");\r\n        document.onmousemove = function (event) {\r\n            var event = event || window.event;\r\n            oDivs[0].style.top = event.clientY + "px";\r\n            oDivs[0].style.left = event.clientX + "px";\r\n            for (var i = oDivs.length - 1; i > 0; i--) {\r\n                oDivs[i].style.top = oDivs[i - 1].offsetTop + "px";\r\n                oDivs[i].style.left = oDivs[i - 1].offsetLeft + "px";\r\n            }\r\n        }\r\n        document.onmousedown = function (event) {\r\n            console.log(new Date().getSeconds());\r\n        }\r\n    <\/script>\r\n    <script>\r\n        /*\r\n     * Settings\r\n     */\r\n        var settings = {\r\n            particles: {\r\n                length: 500, // maximum amount of particles\r\n                duration: 2, // particle duration in sec\r\n                velocity: 100, // particle velocity in pixels/sec\r\n                effect: -0.75, // play with this for a nice effect\r\n                size: 50, // particle size in pixels\r\n            },\r\n        };\r\n\r\n        /*\r\n         * RequestAnimationFrame polyfill by Erik M?ller\r\n         */\r\n        (function () {\r\n            var b = 0; var c = ["ms", "moz", "webkit", "o"];\r\n            for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\r\n                window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"];\r\n                window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"]\r\n            } if (!window.requestAnimationFrame) { window.requestAnimationFrame = function (h, e) { var d = new Date().getTime(); var f = Math.max(0, 16 - (d - b)); var g = window.setTimeout(function () { h(d + f) }, f); b = d + f; return g } }\r\n            if (!window.cancelAnimationFrame) {\r\n                window.cancelAnimationFrame = function (d) {\r\n                    clearTimeout(d)\r\n                }\r\n            }\r\n        }()\r\n        );\r\n\r\n        /*\r\n         * Point class\r\n         */\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                this.x = (typeof x !== \'undefined\') ? x : 0;\r\n                this.y = (typeof y !== \'undefined\') ? y : 0;\r\n            }\r\n            Point.prototype.clone = function () {\r\n                return new Point(this.x, this.y);\r\n            };\r\n            Point.prototype.length = function (length) {\r\n                if (typeof length == \'undefined\')\r\n                    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n                this.normalize();\r\n                this.x *= length;\r\n                this.y *= length;\r\n                return this;\r\n            };\r\n            Point.prototype.normalize = function () {\r\n                var length = this.length();\r\n                this.x /= length;\r\n                this.y /= length;\r\n                return this;\r\n            };\r\n            return Point;\r\n        })();\r\n\r\n        /*\r\n         * Particle class\r\n         */\r\n        var Particle = (function () {\r\n            function Particle() {\r\n                this.position = new Point();\r\n                this.velocity = new Point();\r\n                this.acceleration = new Point();\r\n                this.age = 0;\r\n            }\r\n            Particle.prototype.initialize = function (x, y, dx, dy) {\r\n                this.position.x = x;\r\n                this.position.y = y;\r\n                this.velocity.x = dx;\r\n                this.velocity.y = dy;\r\n                this.acceleration.x = dx * settings.particles.effect;\r\n                this.acceleration.y = dy * settings.particles.effect;\r\n                this.age = 0;\r\n            };\r\n            Particle.prototype.update = function (deltaTime) {\r\n                this.position.x += this.velocity.x * deltaTime;\r\n                this.position.y += this.velocity.y * deltaTime;\r\n                this.velocity.x += this.acceleration.x * deltaTime;\r\n                this.velocity.y += this.acceleration.y * deltaTime;\r\n                this.age += deltaTime;\r\n            };\r\n            Particle.prototype.draw = function (context, image) {\r\n                function ease(t) {\r\n                    return (--t) * t * t + 1;\r\n                }\r\n                var size = image.width * ease(this.age / settings.particles.duration);\r\n                context.globalAlpha = 1 - this.age / settings.particles.duration;\r\n                context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);\r\n            };\r\n            return Particle;\r\n        })();\r\n\r\n        /*\r\n         * ParticlePool class\r\n         */\r\n        var ParticlePool = (function () {\r\n            var particles,\r\n                firstActive = 0,\r\n                firstFree = 0,\r\n                duration = settings.particles.duration;\r\n\r\n            function ParticlePool(length) {\r\n                // create and populate particle pool\r\n                particles = new Array(length);\r\n                for (var i = 0; i < particles.length; i++)\r\n                    particles[i] = new Particle();\r\n            }\r\n            ParticlePool.prototype.add = function (x, y, dx, dy) {\r\n                particles[firstFree].initialize(x, y, dx, dy);\r\n\r\n                // handle circular queue\r\n                firstFree++;\r\n                if (firstFree == particles.length) firstFree = 0;\r\n                if (firstActive == firstFree) firstActive++;\r\n                if (firstActive == particles.length) firstActive = 0;\r\n            };\r\n            ParticlePool.prototype.update = function (deltaTime) {\r\n                var i;\r\n\r\n                // update active particles\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].update(deltaTime);\r\n                }\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].update(deltaTime);\r\n                    for (i = 0; i < firstFree; i++)\r\n                        particles[i].update(deltaTime);\r\n                }\r\n\r\n                // remove inactive particles\r\n                while (particles[firstActive].age >= duration && firstActive != firstFree) {\r\n                    firstActive++;\r\n                    if (firstActive == particles.length) firstActive = 0;\r\n                }\r\n\r\n\r\n            };\r\n            ParticlePool.prototype.draw = function (context, image) {\r\n                // draw active particles\r\n                if (firstActive < firstFree) {\r\n                    for (i = firstActive; i < firstFree; i++)\r\n                        particles[i].draw(context, image);\r\n                }\r\n                if (firstFree < firstActive) {\r\n                    for (i = firstActive; i < particles.length; i++)\r\n                        particles[i].draw(context, image);\r\n                    for (i = 0; i < firstFree; i++)\r\n                        particles[i].draw(context, image);\r\n                }\r\n            };\r\n            return ParticlePool;\r\n        })();\r\n\r\n        /*\r\n         * Putting it all together\r\n         */\r\n        (function (canvas) {\r\n            var context = canvas.getContext(\'2d\'),\r\n                particles = new ParticlePool(settings.particles.length),\r\n                particleRate = settings.particles.length / settings.particles.duration, // particles/sec\r\n                time;\r\n\r\n            // get point on heart with -PI <= t <= PI\r\n            function pointOnHeart(t) {\r\n                return new Point(\r\n                    160 * Math.pow(Math.sin(t), 3),\r\n                    130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25\r\n                );\r\n            }\r\n\r\n            // creating the particle image using a dummy canvas\r\n            var image = (function () {\r\n                var canvas = document.createElement(\'canvas\'),\r\n                    context = canvas.getContext(\'2d\');\r\n                canvas.width = settings.particles.size;\r\n                canvas.height = settings.particles.size;\r\n                // helper function to create the path\r\n                function to(t) {\r\n                    var point = pointOnHeart(t);\r\n                    point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;\r\n                    point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;\r\n                    return point;\r\n                }\r\n                // create the path\r\n                context.beginPath();\r\n                var t = -Math.PI;\r\n                var point = to(t);\r\n                context.moveTo(point.x, point.y);\r\n                while (t < Math.PI) {\r\n                    t += 0.01; // baby steps!\r\n                    point = to(t);\r\n                    context.lineTo(point.x, point.y);\r\n                }\r\n                context.closePath();\r\n                // create the fill\r\n                context.fillStyle = \'#ea80b0\';\r\n                context.fill();\r\n                // create the image\r\n                var image = new Image();\r\n                image.src = canvas.toDataURL();\r\n                return image;\r\n            })();\r\n\r\n            // render that thing!\r\n            function render() {\r\n                // next animation frame\r\n                requestAnimationFrame(render);\r\n\r\n                // update time\r\n                var newTime = new Date().getTime() / 1000,\r\n                    deltaTime = newTime - (time || newTime);\r\n                time = newTime;\r\n\r\n                // clear canvas\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n                // create new particles\r\n                var amount = particleRate * deltaTime;\r\n                for (var i = 0; i < amount; i++) {\r\n                    var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\r\n                    var dir = pos.clone().length(settings.particles.velocity);\r\n                    particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);\r\n                }\r\n\r\n                // update and draw particles\r\n                particles.update(deltaTime);\r\n                particles.draw(context, image);\r\n            }\r\n\r\n            // handle (re-)sizing of the canvas\r\n            function onResize() {\r\n                canvas.width = canvas.clientWidth;\r\n                canvas.height = canvas.clientHeight;\r\n            }\r\n            window.onresize = onResize;\r\n\r\n            // delay rendering bootstrap\r\n            setTimeout(function () {\r\n                onResize();\r\n                render();\r\n            }, 10);\r\n        })(document.getElementById(\'pinkboard\'));\r\n    <\/script>\r\n\r\n\r\n</body>\r\n\r\n</html>';function p(){return Object(a.jsx)("div",{className:"heart-content",children:Object(a.jsx)("div",{dangerouslySetInnerHTML:{__html:d},className:"heart-box"})})}e(72);e(77);var m=e(60),u=e(48),f=(e(80),document.getElementById("root"));Object(r.createRoot)(f).render(Object(a.jsxs)(t.a,{children:[Object(a.jsxs)(u.a,{children:[Object(a.jsx)("title",{children:"asdfsadfsadf"}),Object(a.jsx)("meta",{name:"description",content:"asdfasdfsadf"})]}),Object(a.jsx)(i.a,{locale:m.a,children:Object(a.jsx)((function(){return Object(a.jsxs)(o.c,{children:[Object(a.jsx)(o.a,{exact:!0,path:"/",component:s}),Object(a.jsx)(o.a,{exact:!0,path:"/tree",component:l}),Object(a.jsx)(o.a,{exact:!0,path:"/heart",component:p})]})}),{})})]})),function(n){n&&n instanceof Function&&e.e(3).then(e.bind(null,111)).then((function(r){var e=r.getCLS,t=r.getFID,i=r.getFCP,o=r.getLCP;r=r.getTTFB;e(n),t(n),i(n),o(n),r(n)}))}()},63:function(n,r){String.prototype.format=function(){var n=this,r=arguments.length;if(0!==r)for(var e=0;e<r;e++)n=n.replace(new RegExp("\\{"+e+"\\}","g"),arguments[e]);return n}},72:function(n,r,e){},80:function(n,r,e){}},[[108,1,2]]]);